package cop5556sp17;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;


public class CodeGenVisitorTest {
	//file:\\D:\\Eclipse_mars_workspace\\PLP_Assignments\\bin\\unnamed.png",
	//"D:\\Eclipse_mars_workspace\\PLP_Assignments\\bin\\test.jpg"
	//String in_path_1 = "C:/Divya/WPFPageSwitch/Images/notHand.jpg";
	//String in_path_2 = "C:/Divya/WPFPageSwitch/Images/wave.jpg";
	String out_path = "/Users/jahinmajumdar/Downloads/test.jpg";
	String my_url = "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcQSvvhkY4LDYlhYOMnzcMQdcuMDXfR4AjwkDNpWMgiNw9RUtGmt_Q";

	//String in_path_assert = "C:/Divya/WPFPageSwitch/Images/notHand.jpg";
	//String in_path_1_assert = "C:\\Divya\\WPFPageSwitch\\Images\\notHand.jpg";
	String in_path_2_assert = "/Users/jahinmajumdar/Downloads/1.jpg";
	String out_path_assert = "/Users/jahinmajumdar/Downloads/test.jpg";

	static final boolean doPrint = true;

	static void show(Object s) {
	if (doPrint) {
	System.out.println(s);
	}
	}

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	boolean devel = false;
	boolean grade = true;

	@Before
	public void initLog() {
	if (devel || grade)
	PLPRuntimeLog.initLog();
	}

	@After
	public void printLog() {
	System.out.println(PLPRuntimeLog.getString());
	}

	@Test
	public void test1() throws Exception {
	// scan, parse, and type check the program
	String progname = "subImage";
	String input = progname
	+ "  url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL("+ my_url+")readFromURL("+my_url+")readFromURL("+ my_url+")subcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test2() throws Exception {
	// scan, parse, and type check the program
	String progname = "readFromURLandWriteToFile2";
	String input = progname
	+ "  url u, \nfile out \n{image i frame f \nu -> gray  -> i;\n i -> f -> show; \n i -> out;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url, out_path };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)grayOpcreateOrSetFrameshowImagewrite(C:\Divya\WPFPageSwitch\Images\output.jpg)
	String expOut = "getURL("+ my_url+")readFromURL("+my_url+")grayOpcreateOrSetFrameshowImagewrite("+out_path_assert+")";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test3() throws Exception {
	// scan, parse, and type check the program
	String progname = "readFromURLandWriteToFile3";
	String input = progname + "  url u, \nfile out \n{\nu -> gray  -> out;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url, out_path };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	//assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test4() throws Exception {
	// scan, parse, and type check the program
	String progname = "sleepImg";
	String input = progname
	+ "  url u {image i frame f \nu -> i -> convolve -> f -> hide;sleep 5;integer j j <- 42;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)convolvecreateOrSetFrameshowImage42
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")convolvecreateOrSetFramehideImage42";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test5() throws Exception {
	// scan, parse, and type check the program
	String progname = "fibonacci";
	String input = progname
	+ "  integer n {\n   integer result result<-0;\n   if(n == 0){\n    result<- 0;\n  }\n  if(n == 1){\n    result<- 1;\n  }\n  if(n > 1){\n    integer fib1 fib1<- 0;\n    integer fib2 fib2<- 1;\n    integer idx idx<- 2;\n    while(idx < n){      integer tmp tmp<- fib1 + fib2;\n      fib1<- fib2;\n      fib2<- tmp;\n      idx<- idx + 1;\n    }\n    result<- fib1+fib2;\n  }\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "10" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "00121113212432355356858713813821132193421341055";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test6() throws Exception {
	// scan, parse, and type check the program
	String progname = "addImage";
	String input = progname
	+ " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;  sleep 5; k <- k + i; k -> f -> show; \n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)subcopyImagecreateOrSetFrameshowImageaddcopyImagecreateOrSetFrameshowImageshowImage
	String expOut = "getURL("+ my_url+")readFromURL("+my_url+")readFromURL("+my_url+")subcopyImagecreateOrSetFrameshowImageaddcopyImagecreateOrSetFrameshowImageshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test7() throws Exception {
	// scan, parse, and type check the program
	String progname = "booleanComp1";
	String input = progname
	+ " { boolean x  x<- true == false;boolean y  y<- true != false;boolean z  z<- true | false;z<- x|y;z<- x&y;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[0];
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "falsetruetruetruefalse";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test8() throws Exception {
	// scan, parse, and type check the program
	String progname = "booleanComp2";
	String input = progname
	+ " { boolean x  x<- true;boolean y  y<- false;boolean z  z<- true < false;integer a  a<- 4;integer b  b<- 6;z<- ((a<b) | x) & y;z<- (a<b) | (x & y);}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[0];// {
	// "file:/Users/yash/Documents/UF/Sem2/PLP/imp3.png"
	// };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "truefalsefalse46falsetrue";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test9() throws Exception {
	// scan, parse, and type check the program
	String progname = "convolveImg";
	String input = progname + " url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)convolvecreateOrSetFrameshowImage
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")convolvecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void allTheOps() throws Exception {
	// scan, parse, and type check the program
	String progname = "allTheOps";
	String input = progname + " file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "/Users/jahinmajumdar/Downloads/1.jpg" }; // create
	// command
	// line
	// argument
	// array
	// to
	// initialize
	// params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//readFromFile(C:\Divya\WPFPageSwitch\Images\Wave.jpg)grayOpconvolveblurOpcreateOrSetFrameshowImage
	String expOut = "readFromFile("+in_path_2_assert+")grayOpconvolveblurOpcreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	//instance.run();
	}


	@Test
	public void test10() throws Exception {
	// scan, parse, and type check the program
	String progname = "readFromURLandDisplay";
	String input = progname + " url u {image i frame f \nu -> i;i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)createOrSetFrameshowImage
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();

	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test11() throws Exception {
	// scan, parse, and type check the program
	String progname = "imgMove2";
	String input = progname
	+ " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nx <- screenwidth;\ny <-  screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	//assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test12() throws Exception {
	// scan, parse, and type check the program
	String progname = "subImage2";
	String input = progname
	+ " url u {image i image j  frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)subcopyImagecreateOrSetFrameshowImage
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")readFromURL("+my_url+")subcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test13() throws Exception {
	// scan, parse, and type check the program
	String progname = "booleanBinaryExpression3";
	String input = progname + " boolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "true", "false" };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "falsetrue";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test14() throws Exception {
	// scan, parse, and type check the program
	String progname = "modImage";
	String input = progname + " url u {image i image j  frame f \nu -> j; \n i <- j%128; i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)modcopyImagecreateOrSetFrameshowImage
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")modcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test15() throws Exception {
	// scan, parse, and type check the program
	String progname = "readFromURLandDisplayDisplay2";
	String input = progname + " url u {image i frame f \nu -> i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//"getURL("+my_url")readFromURL("+my_url+")createOrSetFrameshowImage"
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test16() throws Exception {
	// scan, parse, and type check the program
	String progname = "readFromURLandWriteToFile";
	String input = progname + " url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url, out_path };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//"getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImagewrite("+out_path_assert+")"
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImagewrite("+out_path_assert+")";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test17() throws Exception {
	// scan, parse, and type check the program
	String progname = "blurImg";
	String input = progname + " url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")blurOpcreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test18() throws Exception {
	// scan, parse, and type check the program
	String progname = "grayImg";
	String input = progname + " url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")grayOpcreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test19() throws Exception {
	// scan, parse, and type check the program
	String progname = "divImage";
	String input = progname + " url u {image i image j  frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")divcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test20() throws Exception {
	// scan, parse, and type check the program
	String progname = "readFromURLandWriteScaledImageToFile";
	String input = progname
	+ " url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url, out_path };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//getURL(http://www.avajava.com/images/avajavalogo.jpg)readFromURL(http://www.avajava.com/images/avajavalogo.jpg)scalecreateOrSetFrameshowImagewrite(C:\Divya\WPFPageSwitch\Images\output.jpg)
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")scalecreateOrSetFrameshowImagewrite("+out_path_assert+")";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void readFromFile() throws Exception {
	// scan, parse, and type check the program
	String progname = "readFromFile";
	String input = progname + " file u {image i frame f \nu -> i;i -> f -> show; \n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { "/Users/jahinmajumdar/Downloads/1.jpg" }; // create
	// command
	// line
	// argument
	// array
	// to
	// initia	// params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//readFromFile(C:\Divya\WPFPageSwitch\Images\wave.jpg)createOrSetFrameshowImage
	String expOut = "readFromFile("+in_path_2_assert+")createOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}


	@Test
	public void test21() throws Exception {
	// scan, parse, and type check the program
	String progname = "barArrowGray";
	String input = progname + " url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//"getURL("+my_url+")readFromURL("+my_url+")copyImagegrayOpcreateOrSetFrameshowImage"
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")grayOpcreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test22() throws Exception {
	// scan, parse, and type check the program
	String progname = "assignImage";
	String input = progname + " url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	//"getURL("+my_url+")readFromURL(+"my_url+")copyImagecreateOrSetFrameshowImage
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")copyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test23() throws Exception {
	// scan, parse, and type check the program
	String progname = "scaleImage";
	String input = progname
	+ " url u {image i frame f \nu -> i -> f -> show; frame f2  \ni -> scale (3) -> f2 -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImagescalecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test24() throws Exception {
	// scan, parse, and type check the program
	String progname = "imgMove";
	String input = progname
	+ " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImagegetXgetYmoveFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}

	@Test
	public void test25() throws Exception {
	// scan, parse, and type check the program
	String progname = "assignImageAndFrame";
	String input = progname
	+ " url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2  \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);
	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] { my_url };
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL("+my_url+")readFromURL("+my_url+")createOrSetFrameshowImagescalecreateOrSetFrameshowImagecopyImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	System.setOut(new PrintStream(outContent));
	instance.run();
	assertEquals(expOut, PLPRuntimeLog.getString());
	System.setOut(oldStream);
	}


}